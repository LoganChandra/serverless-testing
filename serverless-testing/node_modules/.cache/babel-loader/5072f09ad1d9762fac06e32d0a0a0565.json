{"ast":null,"code":"import \"source-map-support/register\";\n\nconst mysql = require(\"mysql\");\n\nconst util = require(\"util\"); // If extracting parameters from SSM\n\n\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({\n  region: \"ap-southeast-1\"\n});\nvar options = {\n  Name: \"/app/cinema\",\n  // required\n  WithDecryption: true // required if you have a secret string\n\n}; // var pool = mysql.createPool({\n//   host: process.env.DB_HOST,\n//   user: process.env.DB_USER,\n//   password: process.env.DB_PASSWORD,\n//   database: process.env.DB_NAME,\n//   port: process.env.DB_PORT,\n// });\n\nconsole.log(process.env.DB_HOST);\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg\n    })\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  // If extracting parameters from SSM\n  var params = await ssm.getParameter(options).promise();\n  let p = JSON.parse(params.Parameter.Value);\n  var pool = mysql.createPool({\n    host: p.host,\n    user: p.user,\n    password: p.password,\n    database: p.database,\n    port: p.port\n  });\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};","map":{"version":3,"sources":["/Users/logan/Documents/GitHub/serverless-testing/serverless-testing/tests/getMovie.js"],"names":["mysql","require","util","aws","ssm","SSM","region","options","Name","WithDecryption","console","log","process","env","DB_HOST","apiResponse","status","msg","statusCode","body","JSON","stringify","message","handler","event","context","callback","params","getParameter","promise","p","parse","Parameter","Value","pool","createPool","host","user","password","database","port","connQueryPromisified","promisify","query","bind","result"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB,C,CAEA;;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAIG,GAAG,GAAG,IAAID,GAAG,CAACE,GAAR,CAAY;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAZ,CAAV;AACA,IAAIC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE,aADM;AACQ;AACpBC,EAAAA,cAAc,EAAE,IAFJ,CAES;;AAFT,CAAd,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,OAAxB;;AACA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACnC,SAAO;AACLC,IAAAA,UAAU,EAAEF,MADP;AAELG,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,OAAO,EAAEL;AADU,KAAf;AAFD,GAAP;AAMD,CAPD;;AASA,OAAO,MAAMM,OAAO,GAAG,OAAOC,KAAP,EAAcC,OAAd,EAAuBC,QAAvB,KAAoC;AACzD;AACA,MAAIC,MAAM,GAAG,MAAMvB,GAAG,CAACwB,YAAJ,CAAiBrB,OAAjB,EAA0BsB,OAA1B,EAAnB;AACA,MAAIC,CAAC,GAAGV,IAAI,CAACW,KAAL,CAAWJ,MAAM,CAACK,SAAP,CAAiBC,KAA5B,CAAR;AACA,MAAIC,IAAI,GAAGlC,KAAK,CAACmC,UAAN,CAAiB;AAC1BC,IAAAA,IAAI,EAAEN,CAAC,CAACM,IADkB;AAE1BC,IAAAA,IAAI,EAAEP,CAAC,CAACO,IAFkB;AAG1BC,IAAAA,QAAQ,EAAER,CAAC,CAACQ,QAHc;AAI1BC,IAAAA,QAAQ,EAAET,CAAC,CAACS,QAJc;AAK1BC,IAAAA,IAAI,EAAEV,CAAC,CAACU;AALkB,GAAjB,CAAX;AAOA,QAAMC,oBAAoB,GAAGvC,IAAI,CAACwC,SAAL,CAAeR,IAAI,CAACS,KAApB,EAA2BC,IAA3B,CAAgCV,IAAhC,CAA7B;AACA,QAAMW,MAAM,GAAG,MAAMJ,oBAAoB,CAAC,sBAAD,CAAzC;AACA,SAAO1B,WAAW,CAAC,GAAD,EAAM8B,MAAN,CAAlB;AACD,CAdM","sourcesContent":["const mysql = require(\"mysql\");\nconst util = require(\"util\");\n\n// If extracting parameters from SSM\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({ region: \"ap-southeast-1\" });\nvar options = {\n  Name: \"/app/cinema\",// required\n  WithDecryption: true,// required if you have a secret string\n};\n\n// var pool = mysql.createPool({\n//   host: process.env.DB_HOST,\n//   user: process.env.DB_USER,\n//   password: process.env.DB_PASSWORD,\n//   database: process.env.DB_NAME,\n//   port: process.env.DB_PORT,\n// });\n\nconsole.log(process.env.DB_HOST);\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg,\n    }),\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  // If extracting parameters from SSM\n  var params = await ssm.getParameter(options).promise();\n  let p = JSON.parse(params.Parameter.Value);\n  var pool = mysql.createPool({\n    host: p.host,\n    user: p.user,\n    password: p.password,\n    database: p.database,\n    port: p.port,\n  });\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};\n"]},"metadata":{},"sourceType":"module"}