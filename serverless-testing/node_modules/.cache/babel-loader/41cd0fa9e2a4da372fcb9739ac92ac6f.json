{"ast":null,"code":"import \"source-map-support/register\";\n\nconst mysql = require(\"mysql\");\n\nconst util = require(\"util\");\n\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({\n  region: \"ap-southeast-1\"\n});\nvar options = {\n  Name: \"/app/cinema\"\n  /* required */\n  ,\n  WithDecryption: true\n};\nvar params = ssm.getParameter(options).promise();\nparams.then(function (data, err) {\n  if (err) {\n    console.log(err, err.stack);\n  } // an error occurred\n  else {\n    console.log(data.Parameter.Value);\n  } // successful response\n\n});\nvar pool = mysql.createPool({\n  host: \"logan-poc-serverless-db.cluster-ctb7pckp3icd.ap-southeast-1.rds.amazonaws.com\",\n  user: \"admin\",\n  password: \"admin1234\",\n  database: \"Cinema\",\n  port: 3306\n});\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg\n    })\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  return apiResponse(200, params);\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};","map":{"version":3,"sources":["/Users/logan/Documents/GitHub/serverless-testing/serverless-testing/tests/getMovie.js"],"names":["mysql","require","util","aws","ssm","SSM","region","options","Name","WithDecryption","params","getParameter","promise","then","data","err","console","log","stack","Parameter","Value","pool","createPool","host","user","password","database","port","apiResponse","status","msg","statusCode","body","JSON","stringify","message","handler","event","context","callback","connQueryPromisified","promisify","query","bind","result"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAIG,GAAG,GAAG,IAAID,GAAG,CAACE,GAAR,CAAY;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAZ,CAAV;AAEA,IAAIC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE;AAAc;AADR;AAEZC,EAAAA,cAAc,EAAE;AAFJ,CAAd;AAIA,IAAIC,MAAM,GAAGN,GAAG,CAACO,YAAJ,CAAiBJ,OAAjB,EAA0BK,OAA1B,EAAb;AAEAF,MAAM,CAACG,IAAP,CAAY,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AAC/B,MAAIA,GAAJ,EAAS;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiBA,GAAG,CAACG,KAArB;AACD,GAFD,CAEE;AAFF,OAGK;AACHF,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACK,SAAL,CAAeC,KAA3B;AACD,GAN8B,CAM7B;;AACH,CAPD;AASA,IAAIC,IAAI,GAAGrB,KAAK,CAACsB,UAAN,CAAiB;AAC1BC,EAAAA,IAAI,EAAE,+EADoB;AAE1BC,EAAAA,IAAI,EAAE,OAFoB;AAG1BC,EAAAA,QAAQ,EAAE,WAHgB;AAI1BC,EAAAA,QAAQ,EAAE,QAJgB;AAK1BC,EAAAA,IAAI,EAAE;AALoB,CAAjB,CAAX;;AAQA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACnC,SAAO;AACLC,IAAAA,UAAU,EAAEF,MADP;AAELG,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,OAAO,EAAEL;AADU,KAAf;AAFD,GAAP;AAMD,CAPD;;AASA,OAAO,MAAMM,OAAO,GAAG,OAAOC,KAAP,EAAcC,OAAd,EAAuBC,QAAvB,KAAoC;AACzD,SAAOX,WAAW,CAAC,GAAD,EAAMlB,MAAN,CAAlB;AACA,QAAM8B,oBAAoB,GAAGtC,IAAI,CAACuC,SAAL,CAAepB,IAAI,CAACqB,KAApB,EAA2BC,IAA3B,CAAgCtB,IAAhC,CAA7B;AACA,QAAMuB,MAAM,GAAG,MAAMJ,oBAAoB,CAAC,sBAAD,CAAzC;AACA,SAAOZ,WAAW,CAAC,GAAD,EAAMgB,MAAN,CAAlB;AACD,CALM","sourcesContent":["const mysql = require(\"mysql\");\nconst util = require(\"util\");\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({ region: \"ap-southeast-1\" });\n\nvar options = {\n  Name: \"/app/cinema\" /* required */,\n  WithDecryption: true\n};\nvar params = ssm.getParameter(options).promise();\n\nparams.then(function (data, err) {\n  if (err) {\n    console.log(err, err.stack);\n  } // an error occurred\n  else {\n    console.log(data.Parameter.Value);\n  } // successful response\n});\n\nvar pool = mysql.createPool({\n  host: \"logan-poc-serverless-db.cluster-ctb7pckp3icd.ap-southeast-1.rds.amazonaws.com\",\n  user: \"admin\",\n  password: \"admin1234\",\n  database: \"Cinema\",\n  port: 3306,\n});\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg,\n    }),\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  return apiResponse(200, params);\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};\n"]},"metadata":{},"sourceType":"module"}