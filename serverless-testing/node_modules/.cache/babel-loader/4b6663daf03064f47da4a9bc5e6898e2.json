{"ast":null,"code":"import \"source-map-support/register\";\n\nconst mysql = require(\"mysql\");\n\nconst util = require(\"util\"); // If extracting parameters from SSM\n// const aws = require(\"aws-sdk\");\n// var ssm = new aws.SSM({ region: \"ap-southeast-1\" });\n// var options = {\n//   Name: \"/app/cinema\",// required\n//   WithDecryption: true,// required if you have a secret string\n// };\n\n\nvar pool = mysql.createPool({\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  port: process.env.DB_PORT\n});\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg\n    })\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  // If extracting parameters from SSM\n  // var params = await ssm.getParameter(options).promise();\n  // let p = JSON.parse(params.Parameter.Value);\n  // var pool = mysql.createPool({\n  //   host: p.host,\n  //   user: p.user,\n  //   password: p.password,\n  //   database: p.database,\n  //   port: p.port,\n  // });\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};","map":{"version":3,"sources":["/Users/logan/Documents/GitHub/serverless-testing/serverless-testing/tests/getMovie.js"],"names":["mysql","require","util","pool","createPool","host","process","env","DB_HOST","user","DB_USER","password","DB_PASSWORD","database","DB_NAME","port","DB_PORT","apiResponse","status","msg","statusCode","body","JSON","stringify","message","handler","event","context","callback","connQueryPromisified","promisify","query","bind","result"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,IAAIE,IAAI,GAAGH,KAAK,CAACI,UAAN,CAAiB;AAC1BC,EAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,OADQ;AAE1BC,EAAAA,IAAI,EAAEH,OAAO,CAACC,GAAR,CAAYG,OAFQ;AAG1BC,EAAAA,QAAQ,EAAEL,OAAO,CAACC,GAAR,CAAYK,WAHI;AAI1BC,EAAAA,QAAQ,EAAEP,OAAO,CAACC,GAAR,CAAYO,OAJI;AAK1BC,EAAAA,IAAI,EAAET,OAAO,CAACC,GAAR,CAAYS;AALQ,CAAjB,CAAX;;AAQA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACnC,SAAO;AACLC,IAAAA,UAAU,EAAEF,MADP;AAELG,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,OAAO,EAAEL;AADU,KAAf;AAFD,GAAP;AAMD,CAPD;;AASA,OAAO,MAAMM,OAAO,GAAG,OAAOC,KAAP,EAAcC,OAAd,EAAuBC,QAAvB,KAAoC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,oBAAoB,GAAG3B,IAAI,CAAC4B,SAAL,CAAe3B,IAAI,CAAC4B,KAApB,EAA2BC,IAA3B,CAAgC7B,IAAhC,CAA7B;AACA,QAAM8B,MAAM,GAAG,MAAMJ,oBAAoB,CAAC,sBAAD,CAAzC;AACA,SAAOZ,WAAW,CAAC,GAAD,EAAMgB,MAAN,CAAlB;AACD,CAdM","sourcesContent":["const mysql = require(\"mysql\");\nconst util = require(\"util\");\n\n// If extracting parameters from SSM\n// const aws = require(\"aws-sdk\");\n\n// var ssm = new aws.SSM({ region: \"ap-southeast-1\" });\n// var options = {\n//   Name: \"/app/cinema\",// required\n//   WithDecryption: true,// required if you have a secret string\n// };\n\nvar pool = mysql.createPool({\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  port: process.env.DB_PORT,\n});\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg,\n    }),\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  // If extracting parameters from SSM\n  // var params = await ssm.getParameter(options).promise();\n  // let p = JSON.parse(params.Parameter.Value);\n  // var pool = mysql.createPool({\n  //   host: p.host,\n  //   user: p.user,\n  //   password: p.password,\n  //   database: p.database,\n  //   port: p.port,\n  // });\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};\n"]},"metadata":{},"sourceType":"module"}