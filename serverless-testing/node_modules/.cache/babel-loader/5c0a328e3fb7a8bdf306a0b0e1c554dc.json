{"ast":null,"code":"import \"source-map-support/register\";\nimport jwt from \"jsonwebtoken\"; // import mysql from \"mysql\";\n\nimport { createHash } from \"crypto\"; // import apiResponse from \"../libs/apiGateway\";\n// declare var process: {\n//   env: {\n//     DB_CONFIG: string;\n//   };\n// };\n// let username: string;\n// let password: string;\n// let SQL: string = `SELECT * FROM admin_users WHERE username = ?`;\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg\n    })\n  };\n};\n\nexport const hello = async event => {\n  return apiResponse(500, 'fail 44');\n  const body = JSON.parse(event.body);\n\n  try {\n    username = body.username;\n    password = body.password;\n\n    if (username == \"\" || password == \"\") {\n      return apiResponse(500, 'fail 44');\n    }\n  } catch (err) {\n    return apiResponse(500, 'fail', 51);\n  }\n\n  try {\n    let queryResult;\n    let queryResultPassword;\n    const hashPassword = createHash(\"sha256\").update(password).digest(\"hex\");\n    SQL = conn.format(SQL, [username]);\n    queryResult = await query(SQL);\n\n    if (queryResult.length > 0) {\n      queryResultPassword = queryResult[0].password;\n\n      if (hashPassword == queryResultPassword) {\n        let token = jwt.sign({\n          id: queryResult[0].id\n        }, \"secret\", {\n          expiresIn: \"30m\"\n        });\n        return apiResponse(200, 'success 73');\n      } else {\n        return apiResponse(500, 'fail 76 ');\n      }\n    } else {\n      return apiResponse(500, 'fail 80');\n    }\n  } catch (err) {\n    console.log(err);\n    return apiResponse(500, 'fail 85');\n  } finally {\n    conn.end();\n  }\n};","map":{"version":3,"sources":["/Users/logan/Documents/GitHub/serverless-testing/notes-api/tests/handler.js"],"names":["jwt","createHash","apiResponse","status","msg","statusCode","body","JSON","stringify","message","hello","event","parse","username","password","err","queryResult","queryResultPassword","hashPassword","update","digest","SQL","conn","format","query","length","token","sign","id","expiresIn","console","log","end"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,cAAhB,C,CACA;;AACA,SAASC,UAAT,QAA2B,QAA3B,C,CACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACnC,SAAO;AACLC,IAAAA,UAAU,EAAEF,MADP;AAELG,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,OAAO,EAAEL;AADU,KAAf;AAFD,GAAP;AAMD,CAPD;;AAQA,OAAO,MAAMM,KAAK,GAAG,MAAOC,KAAP,IAAiB;AACpC,SAAOT,WAAW,CAAC,GAAD,EAAK,SAAL,CAAlB;AAEA,QAAMI,IAAI,GAAGC,IAAI,CAACK,KAAL,CAAWD,KAAK,CAACL,IAAjB,CAAb;;AAEA,MAAI;AACFO,IAAAA,QAAQ,GAAGP,IAAI,CAACO,QAAhB;AACAC,IAAAA,QAAQ,GAAGR,IAAI,CAACQ,QAAhB;;AACA,QAAID,QAAQ,IAAI,EAAZ,IAAkBC,QAAQ,IAAI,EAAlC,EAAsC;AACpC,aAAOZ,WAAW,CAAC,GAAD,EAAK,SAAL,CAAlB;AACD;AACF,GAND,CAME,OAAOa,GAAP,EAAY;AACZ,WAAOb,WAAW,CAAC,GAAD,EAAK,MAAL,EAAa,EAAb,CAAlB;AACD;;AACD,MAAI;AACF,QAAIc,WAAJ;AACA,QAAIC,mBAAJ;AACA,UAAMC,YAAY,GAAGjB,UAAU,CAAC,QAAD,CAAV,CAAqBkB,MAArB,CAA4BL,QAA5B,EAAsCM,MAAtC,CAA6C,KAA7C,CAArB;AACAC,IAAAA,GAAG,GAAGC,IAAI,CAACC,MAAL,CAAYF,GAAZ,EAAiB,CAACR,QAAD,CAAjB,CAAN;AACAG,IAAAA,WAAW,GAAG,MAAMQ,KAAK,CAACH,GAAD,CAAzB;;AACA,QAAIL,WAAW,CAACS,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BR,MAAAA,mBAAmB,GAAGD,WAAW,CAAC,CAAD,CAAX,CAAeF,QAArC;;AACA,UAAII,YAAY,IAAID,mBAApB,EAAyC;AACvC,YAAIS,KAAK,GAAG1B,GAAG,CAAC2B,IAAJ,CACV;AACEC,UAAAA,EAAE,EAAEZ,WAAW,CAAC,CAAD,CAAX,CAAeY;AADrB,SADU,EAIV,QAJU,EAKV;AAAEC,UAAAA,SAAS,EAAE;AAAb,SALU,CAAZ;AAOA,eAAO3B,WAAW,CAAC,GAAD,EAAK,YAAL,CAAlB;AAED,OAVD,MAUO;AACL,eAAOA,WAAW,CAAC,GAAD,EAAK,UAAL,CAAlB;AAED;AACF,KAhBD,MAgBO;AACL,aAAOA,WAAW,CAAC,GAAD,EAAK,SAAL,CAAlB;AAED;AACF,GA1BD,CA0BE,OAAOa,GAAP,EAAY;AACZe,IAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAZ;AACA,WAAOb,WAAW,CAAC,GAAD,EAAK,SAAL,CAAlB;AAED,GA9BD,SA8BU;AACRoB,IAAAA,IAAI,CAACU,GAAL;AACD;AAEF,CAhDM","sourcesContent":["import jwt from \"jsonwebtoken\";\n// import mysql from \"mysql\";\nimport { createHash } from \"crypto\";\n// import apiResponse from \"../libs/apiGateway\";\n\n// declare var process: {\n//   env: {\n//     DB_CONFIG: string;\n//   };\n// };\n\n// let username: string;\n// let password: string;\n// let SQL: string = `SELECT * FROM admin_users WHERE username = ?`;\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg,\n    }),\n  };\n};\nexport const hello = async (event) => {\n  return apiResponse(500,'fail 44');\n\n  const body = JSON.parse(event.body);\n\n  try {\n    username = body.username;\n    password = body.password;\n    if (username == \"\" || password == \"\") {\n      return apiResponse(500,'fail 44');\n    }\n  } catch (err) {\n    return apiResponse(500,'fail', 51);\n  }\n  try {\n    let queryResult;\n    let queryResultPassword;\n    const hashPassword = createHash(\"sha256\").update(password).digest(\"hex\");\n    SQL = conn.format(SQL, [username]);\n    queryResult = await query(SQL);\n    if (queryResult.length > 0) {\n      queryResultPassword = queryResult[0].password;\n      if (hashPassword == queryResultPassword) {\n        let token = jwt.sign(\n          {\n            id: queryResult[0].id,\n          },\n          \"secret\",\n          { expiresIn: \"30m\" }\n        );\n        return apiResponse(200,'success 73');\n        \n      } else {\n        return apiResponse(500,'fail 76 ');\n        \n      }\n    } else {\n      return apiResponse(500,'fail 80');\n      \n    }\n  } catch (err) {\n    console.log(err);\n    return apiResponse(500,'fail 85');\n    \n  } finally {\n    conn.end();\n  }\n\n};\n"]},"metadata":{},"sourceType":"module"}