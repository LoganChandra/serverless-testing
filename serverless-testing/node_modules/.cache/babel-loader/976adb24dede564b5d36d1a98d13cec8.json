{"ast":null,"code":"import \"source-map-support/register\";\n\nconst mysql = require(\"mysql\");\n\nconst util = require(\"util\");\n\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({\n  region: \"ap-southeast-1\"\n});\nvar options = {\n  Name: \"/app/cinema\",\n  // required\n  WithDecryption: true // required if you have a secret string parameter\n\n};\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg\n    })\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  var params = await ssm.getParameter(options).promise();\n  let p = JSON.parse(params.Parameter.Value);\n  console.log(p.host, p.user, p.password, p.database, p.port);\n  var pool = mysql.createPool({\n    connectionLimit: 1000,\n    connectTimeout: 60 * 60 * 1000,\n    acquireTimeout: 60 * 60 * 1000,\n    timeout: 60 * 60 * 1000,\n    host: p.host,\n    user: p.user,\n    password: p.password,\n    database: p.database,\n    port: p.port\n  });\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};","map":{"version":3,"sources":["/Users/logan/Documents/GitHub/serverless-testing/serverless-testing/tests/getMovie.js"],"names":["mysql","require","util","aws","ssm","SSM","region","options","Name","WithDecryption","apiResponse","status","msg","statusCode","body","JSON","stringify","message","handler","event","context","callback","params","getParameter","promise","p","parse","Parameter","Value","console","log","host","user","password","database","port","pool","createPool","connectionLimit","connectTimeout","acquireTimeout","timeout","connQueryPromisified","promisify","query","bind","result"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAIG,GAAG,GAAG,IAAID,GAAG,CAACE,GAAR,CAAY;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAZ,CAAV;AAEA,IAAIC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE,aADM;AACS;AACrBC,EAAAA,cAAc,EAAE,IAFJ,CAEU;;AAFV,CAAd;;AAKA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACnC,SAAO;AACLC,IAAAA,UAAU,EAAEF,MADP;AAELG,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,OAAO,EAAEL;AADU,KAAf;AAFD,GAAP;AAMD,CAPD;;AASA,OAAO,MAAMM,OAAO,GAAG,OAAOC,KAAP,EAAcC,OAAd,EAAuBC,QAAvB,KAAoC;AACzD,MAAIC,MAAM,GAAG,MAAMlB,GAAG,CAACmB,YAAJ,CAAiBhB,OAAjB,EAA0BiB,OAA1B,EAAnB;AACA,MAAIC,CAAC,GAAGV,IAAI,CAACW,KAAL,CAAWJ,MAAM,CAACK,SAAP,CAAiBC,KAA5B,CAAR;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,CAAC,CAACM,IAAd,EAAoBN,CAAC,CAACO,IAAtB,EAA4BP,CAAC,CAACQ,QAA9B,EAAwCR,CAAC,CAACS,QAA1C,EAAoDT,CAAC,CAACU,IAAtD;AACA,MAAIC,IAAI,GAAGpC,KAAK,CAACqC,UAAN,CAAiB;AAC1BC,IAAAA,eAAe,EAAG,IADQ;AAE1BC,IAAAA,cAAc,EAAI,KAAK,EAAL,GAAU,IAFF;AAG1BC,IAAAA,cAAc,EAAI,KAAK,EAAL,GAAU,IAHF;AAI1BC,IAAAA,OAAO,EAAW,KAAK,EAAL,GAAU,IAJF;AAK1BV,IAAAA,IAAI,EAAEN,CAAC,CAACM,IALkB;AAM1BC,IAAAA,IAAI,EAAEP,CAAC,CAACO,IANkB;AAO1BC,IAAAA,QAAQ,EAAER,CAAC,CAACQ,QAPc;AAQ1BC,IAAAA,QAAQ,EAAET,CAAC,CAACS,QARc;AAS1BC,IAAAA,IAAI,EAAEV,CAAC,CAACU;AATkB,GAAjB,CAAX;AAWA,QAAMO,oBAAoB,GAAGxC,IAAI,CAACyC,SAAL,CAAeP,IAAI,CAACQ,KAApB,EAA2BC,IAA3B,CAAgCT,IAAhC,CAA7B;AACA,QAAMU,MAAM,GAAG,MAAMJ,oBAAoB,CAAC,sBAAD,CAAzC;AACA,SAAOhC,WAAW,CAAC,GAAD,EAAMoC,MAAN,CAAlB;AACD,CAlBM","sourcesContent":["const mysql = require(\"mysql\");\nconst util = require(\"util\");\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({ region: \"ap-southeast-1\" });\n\nvar options = {\n  Name: \"/app/cinema\", // required\n  WithDecryption: true, // required if you have a secret string parameter\n};\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg,\n    }),\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  var params = await ssm.getParameter(options).promise();\n  let p = JSON.parse(params.Parameter.Value);\n  console.log(p.host, p.user, p.password, p.database, p.port);\n  var pool = mysql.createPool({\n    connectionLimit : 1000,\n    connectTimeout  : 60 * 60 * 1000,\n    acquireTimeout  : 60 * 60 * 1000,\n    timeout         : 60 * 60 * 1000,\n    host: p.host,\n    user: p.user,\n    password: p.password,\n    database: p.database,\n    port: p.port,\n  });\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};\n"]},"metadata":{},"sourceType":"module"}