{"ast":null,"code":"import \"source-map-support/register\";\n\nconst mysql = require(\"mysql\");\n\nconst util = require(\"util\");\n\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({\n  region: \"ap-southeast-1\"\n});\nvar options = {\n  Name: \"/app/cinema\"\n  /* required */\n  ,\n  WithDecryption: true\n}; // var p = await ssm.getParameter(options).promise();\n// console.log(p, \"_____2\");\n// var p = params\n//   .then(function (data, err) {\n//     if (err) {\n//       console.log(err, err.stack);\n//     } // an error occurred\n//     else {\n//       console.log(JSON.parse(data.Parameter.Value), \"_____1\");\n//       return JSON.parse(data.Parameter.Value);\n//     } // successful response\n//   });\n//   console.log(p, \"_____2\");\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg\n    })\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  var p = await ssm.getParameter(options).promise();\n  var pool = mysql.createPool({\n    host: p.host,\n    user: p.user,\n    password: p.password,\n    database: p.database,\n    port: p.port\n  });\n  console.log(p);\n  return;\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};","map":{"version":3,"sources":["/Users/logan/Documents/GitHub/serverless-testing/serverless-testing/tests/getMovie.js"],"names":["mysql","require","util","aws","ssm","SSM","region","options","Name","WithDecryption","apiResponse","status","msg","statusCode","body","JSON","stringify","message","handler","event","context","callback","p","getParameter","promise","pool","createPool","host","user","password","database","port","console","log","connQueryPromisified","promisify","query","bind","result"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAIG,GAAG,GAAG,IAAID,GAAG,CAACE,GAAR,CAAY;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAZ,CAAV;AAEA,IAAIC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE;AAAc;AADR;AAEZC,EAAAA,cAAc,EAAE;AAFJ,CAAd,C,CAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACnC,SAAO;AACLC,IAAAA,UAAU,EAAEF,MADP;AAELG,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,OAAO,EAAEL;AADU,KAAf;AAFD,GAAP;AAMD,CAPD;;AASA,OAAO,MAAMM,OAAO,GAAG,OAAOC,KAAP,EAAcC,OAAd,EAAuBC,QAAvB,KAAoC;AACzD,MAAIC,CAAC,GAAG,MAAMlB,GAAG,CAACmB,YAAJ,CAAiBhB,OAAjB,EAA0BiB,OAA1B,EAAd;AACA,MAAIC,IAAI,GAAGzB,KAAK,CAAC0B,UAAN,CAAiB;AAC1BC,IAAAA,IAAI,EAAEL,CAAC,CAACK,IADkB;AAE1BC,IAAAA,IAAI,EAAEN,CAAC,CAACM,IAFkB;AAG1BC,IAAAA,QAAQ,EAAEP,CAAC,CAACO,QAHc;AAI1BC,IAAAA,QAAQ,EAAER,CAAC,CAACQ,QAJc;AAK1BC,IAAAA,IAAI,EAAET,CAAC,CAACS;AALkB,GAAjB,CAAX;AAOAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,CAAZ;AACA;AACA,QAAMY,oBAAoB,GAAGhC,IAAI,CAACiC,SAAL,CAAeV,IAAI,CAACW,KAApB,EAA2BC,IAA3B,CAAgCZ,IAAhC,CAA7B;AACA,QAAMa,MAAM,GAAG,MAAMJ,oBAAoB,CAAC,sBAAD,CAAzC;AACA,SAAOxB,WAAW,CAAC,GAAD,EAAM4B,MAAN,CAAlB;AACD,CAdM","sourcesContent":["const mysql = require(\"mysql\");\nconst util = require(\"util\");\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({ region: \"ap-southeast-1\" });\n\nvar options = {\n  Name: \"/app/cinema\" /* required */,\n  WithDecryption: true,\n};\n// var p = await ssm.getParameter(options).promise();\n// console.log(p, \"_____2\");\n\n// var p = params\n//   .then(function (data, err) {\n//     if (err) {\n//       console.log(err, err.stack);\n//     } // an error occurred\n//     else {\n//       console.log(JSON.parse(data.Parameter.Value), \"_____1\");\n//       return JSON.parse(data.Parameter.Value);\n//     } // successful response\n//   });\n//   console.log(p, \"_____2\");\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg,\n    }),\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  var p = await ssm.getParameter(options).promise();\n  var pool = mysql.createPool({\n    host: p.host,\n    user: p.user,\n    password: p.password,\n    database: p.database,\n    port: p.port,\n  });\n  console.log(p);\n  return;\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};\n"]},"metadata":{},"sourceType":"module"}