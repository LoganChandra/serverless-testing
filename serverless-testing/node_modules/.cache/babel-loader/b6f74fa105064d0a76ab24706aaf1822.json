{"ast":null,"code":"import \"source-map-support/register\";\n\nconst mysql = require(\"mysql\");\n\nconst util = require(\"util\");\n\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({\n  region: \"ap-southeast-1\"\n});\nvar options = {\n  Name: \"/app/cinema\"\n  /* required */\n  ,\n  WithDecryption: true\n};\nvar params = ssm.getParameter(options);\nconsole.log(params.Parameter.Value, JSON.parse(params.Parameter.Value).host); // var pool;\n// params.then(function (data, err) {\n//   if (err) {\n//     console.log(err, err.stack);\n//   } // an error occurred\n//   else {\n//     console.log(data.Parameter.Value,JSON.parse(data.Parameter.Value).host);\n//     let p = JSON.parse(data.Parameter.Value);\n//     pool = mysql.createPool({\n//       host: p.host,\n//       user: p.user,\n//       password: p.password,\n//       database: p.database,\n//       port: p.port,\n//     });\n//   } // successful response\n// });\n\nvar pool = mysql.createPool({\n  host: params.host,\n  user: params.user,\n  password: params.password,\n  database: params.database,\n  port: params.port\n});\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg\n    })\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};","map":{"version":3,"sources":["/Users/logan/Documents/GitHub/serverless-testing/serverless-testing/tests/getMovie.js"],"names":["mysql","require","util","aws","ssm","SSM","region","options","Name","WithDecryption","params","getParameter","console","log","Parameter","Value","JSON","parse","host","pool","createPool","user","password","database","port","apiResponse","status","msg","statusCode","body","stringify","message","handler","event","context","callback","connQueryPromisified","promisify","query","bind","result"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAIG,GAAG,GAAG,IAAID,GAAG,CAACE,GAAR,CAAY;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAZ,CAAV;AAEA,IAAIC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE;AAAc;AADR;AAEZC,EAAAA,cAAc,EAAE;AAFJ,CAAd;AAIA,IAAIC,MAAM,GAAGN,GAAG,CAACO,YAAJ,CAAiBJ,OAAjB,CAAb;AACAK,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,SAAP,CAAiBC,KAA7B,EAAoCC,IAAI,CAACC,KAAL,CAAWP,MAAM,CAACI,SAAP,CAAiBC,KAA5B,EAAmCG,IAAvE,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,IAAI,GAAGnB,KAAK,CAACoB,UAAN,CAAiB;AACpBF,EAAAA,IAAI,EAAER,MAAM,CAACQ,IADO;AAEpBG,EAAAA,IAAI,EAAEX,MAAM,CAACW,IAFO;AAGpBC,EAAAA,QAAQ,EAAEZ,MAAM,CAACY,QAHG;AAIpBC,EAAAA,QAAQ,EAAEb,MAAM,CAACa,QAJG;AAKpBC,EAAAA,IAAI,EAAEd,MAAM,CAACc;AALO,CAAjB,CAAX;;AAOA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACnC,SAAO;AACLC,IAAAA,UAAU,EAAEF,MADP;AAELG,IAAAA,IAAI,EAAEb,IAAI,CAACc,SAAL,CAAe;AACnBC,MAAAA,OAAO,EAAEJ;AADU,KAAf;AAFD,GAAP;AAMD,CAPD;;AASA,OAAO,MAAMK,OAAO,GAAG,OAAOC,KAAP,EAAcC,OAAd,EAAuBC,QAAvB,KAAoC;AACzD,QAAMC,oBAAoB,GAAGlC,IAAI,CAACmC,SAAL,CAAelB,IAAI,CAACmB,KAApB,EAA2BC,IAA3B,CAAgCpB,IAAhC,CAA7B;AACA,QAAMqB,MAAM,GAAG,MAAMJ,oBAAoB,CAAC,sBAAD,CAAzC;AACA,SAAOX,WAAW,CAAC,GAAD,EAAMe,MAAN,CAAlB;AACD,CAJM","sourcesContent":["const mysql = require(\"mysql\");\nconst util = require(\"util\");\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({ region: \"ap-southeast-1\" });\n\nvar options = {\n  Name: \"/app/cinema\" /* required */,\n  WithDecryption: true\n};\nvar params = ssm.getParameter(options);\nconsole.log(params.Parameter.Value, JSON.parse(params.Parameter.Value).host);\n\n// var pool;\n// params.then(function (data, err) {\n//   if (err) {\n//     console.log(err, err.stack);\n//   } // an error occurred\n//   else {\n//     console.log(data.Parameter.Value,JSON.parse(data.Parameter.Value).host);\n//     let p = JSON.parse(data.Parameter.Value);\n//     pool = mysql.createPool({\n//       host: p.host,\n//       user: p.user,\n//       password: p.password,\n//       database: p.database,\n//       port: p.port,\n//     });\n//   } // successful response\n// });\nvar pool = mysql.createPool({\n        host: params.host,\n        user: params.user,\n        password: params.password,\n        database: params.database,\n        port: params.port,\n      });\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg,\n    }),\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};\n"]},"metadata":{},"sourceType":"module"}