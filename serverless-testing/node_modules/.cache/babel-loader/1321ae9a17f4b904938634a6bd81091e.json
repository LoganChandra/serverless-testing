{"ast":null,"code":"import \"source-map-support/register\";\n\nconst mysql = require(\"mysql\");\n\nconst util = require(\"util\");\n\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({\n  region: \"ap-southeast-1\"\n});\nvar options = {\n  Name: \"/app/cinema\",\n  // required\n  WithDecryption: true // required if you have a secret string parameter\n\n};\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg\n    })\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  var params = await ssm.getParameter(options).promise();\n  let p = JSON.parse(params.Parameter.Value);\n  console.log(p, \"____payload\");\n  var pool = mysql.createPool({\n    host: p[\"host\"],\n    user: p[\"user\"],\n    password: p[\"password\"],\n    database: p[\"database\"],\n    port: p[\"port\"]\n  });\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};","map":{"version":3,"sources":["/Users/logan/Documents/GitHub/serverless-testing/serverless-testing/tests/getMovie.js"],"names":["mysql","require","util","aws","ssm","SSM","region","options","Name","WithDecryption","apiResponse","status","msg","statusCode","body","JSON","stringify","message","handler","event","context","callback","params","getParameter","promise","p","parse","Parameter","Value","console","log","pool","createPool","host","user","password","database","port","connQueryPromisified","promisify","query","bind","result"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAIG,GAAG,GAAG,IAAID,GAAG,CAACE,GAAR,CAAY;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAZ,CAAV;AAEA,IAAIC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE,aADM;AACQ;AACpBC,EAAAA,cAAc,EAAE,IAFJ,CAES;;AAFT,CAAd;;AAKA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACnC,SAAO;AACLC,IAAAA,UAAU,EAAEF,MADP;AAELG,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,OAAO,EAAEL;AADU,KAAf;AAFD,GAAP;AAMD,CAPD;;AASA,OAAO,MAAMM,OAAO,GAAG,OAAOC,KAAP,EAAcC,OAAd,EAAuBC,QAAvB,KAAoC;AACzD,MAAIC,MAAM,GAAG,MAAMlB,GAAG,CAACmB,YAAJ,CAAiBhB,OAAjB,EAA0BiB,OAA1B,EAAnB;AACA,MAAIC,CAAC,GAAGV,IAAI,CAACW,KAAL,CAAWJ,MAAM,CAACK,SAAP,CAAiBC,KAA5B,CAAR;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,CAAZ,EAAe,aAAf;AACA,MAAIM,IAAI,GAAG/B,KAAK,CAACgC,UAAN,CAAiB;AAC1BC,IAAAA,IAAI,EAAER,CAAC,CAAC,MAAD,CADmB;AAE1BS,IAAAA,IAAI,EAAET,CAAC,CAAC,MAAD,CAFmB;AAG1BU,IAAAA,QAAQ,EAAEV,CAAC,CAAC,UAAD,CAHe;AAI1BW,IAAAA,QAAQ,EAAEX,CAAC,CAAC,UAAD,CAJe;AAK1BY,IAAAA,IAAI,EAAEZ,CAAC,CAAC,MAAD;AALmB,GAAjB,CAAX;AAOA,QAAMa,oBAAoB,GAAGpC,IAAI,CAACqC,SAAL,CAAeR,IAAI,CAACS,KAApB,EAA2BC,IAA3B,CAAgCV,IAAhC,CAA7B;AACA,QAAMW,MAAM,GAAG,MAAMJ,oBAAoB,CAAC,sBAAD,CAAzC;AACA,SAAO5B,WAAW,CAAC,GAAD,EAAMgC,MAAN,CAAlB;AACD,CAdM","sourcesContent":["const mysql = require(\"mysql\");\nconst util = require(\"util\");\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({ region: \"ap-southeast-1\" });\n\nvar options = {\n  Name: \"/app/cinema\",// required\n  WithDecryption: true,// required if you have a secret string parameter\n};\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg,\n    }),\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  var params = await ssm.getParameter(options).promise();\n  let p = JSON.parse(params.Parameter.Value);\n  console.log(p, \"____payload\");\n  var pool = mysql.createPool({\n    host: p[\"host\"],\n    user: p[\"user\"],\n    password: p[\"password\"],\n    database: p[\"database\"],\n    port: p[\"port\"],\n  });\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};\n"]},"metadata":{},"sourceType":"module"}