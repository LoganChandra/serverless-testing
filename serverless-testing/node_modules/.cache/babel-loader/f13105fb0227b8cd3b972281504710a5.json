{"ast":null,"code":"import \"source-map-support/register\";\n\nconst mysql = require(\"mysql\");\n\nconst util = require(\"util\");\n\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({\n  region: \"ap-southeast-1\"\n});\nvar options = {\n  Name: \"/app/cinema\",\n  // required\n  WithDecryption: true // required if you have a secret string parameter\n\n};\n\nvar createPool = async () => {\n  let params = await ssm.getParameter(options).promise();\n  let p = JSON.parse(params.Parameter.Value);\n  return mysql.createPool({\n    host: p[\"host\"],\n    user: p[\"user\"],\n    password: p[\"password\"],\n    database: p[\"database\"],\n    port: p[\"port\"]\n  });\n};\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg\n    })\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  let pool = await createPool();\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};","map":{"version":3,"sources":["/Users/logan/Documents/GitHub/serverless-testing/serverless-testing/tests/getMovie.js"],"names":["mysql","require","util","aws","ssm","SSM","region","options","Name","WithDecryption","createPool","params","getParameter","promise","p","JSON","parse","Parameter","Value","host","user","password","database","port","apiResponse","status","msg","statusCode","body","stringify","message","handler","event","context","callback","pool","connQueryPromisified","promisify","query","bind","result"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAIG,GAAG,GAAG,IAAID,GAAG,CAACE,GAAR,CAAY;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAZ,CAAV;AAEA,IAAIC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE,aADM;AACS;AACrBC,EAAAA,cAAc,EAAE,IAFJ,CAEU;;AAFV,CAAd;;AAKA,IAAIC,UAAU,GAAG,YAAY;AAC3B,MAAIC,MAAM,GAAG,MAAMP,GAAG,CAACQ,YAAJ,CAAiBL,OAAjB,EAA0BM,OAA1B,EAAnB;AACA,MAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWL,MAAM,CAACM,SAAP,CAAiBC,KAA5B,CAAR;AACA,SAAOlB,KAAK,CAACU,UAAN,CAAiB;AACtBS,IAAAA,IAAI,EAAEL,CAAC,CAAC,MAAD,CADe;AAEtBM,IAAAA,IAAI,EAAEN,CAAC,CAAC,MAAD,CAFe;AAGtBO,IAAAA,QAAQ,EAAEP,CAAC,CAAC,UAAD,CAHW;AAItBQ,IAAAA,QAAQ,EAAER,CAAC,CAAC,UAAD,CAJW;AAKtBS,IAAAA,IAAI,EAAET,CAAC,CAAC,MAAD;AALe,GAAjB,CAAP;AAOD,CAVD;;AAYA,MAAMU,WAAW,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACnC,SAAO;AACLC,IAAAA,UAAU,EAAEF,MADP;AAELG,IAAAA,IAAI,EAAEb,IAAI,CAACc,SAAL,CAAe;AACnBC,MAAAA,OAAO,EAAEJ;AADU,KAAf;AAFD,GAAP;AAMD,CAPD;;AASA,OAAO,MAAMK,OAAO,GAAG,OAAOC,KAAP,EAAcC,OAAd,EAAuBC,QAAvB,KAAoC;AACzD,MAAIC,IAAI,GAAG,MAAMzB,UAAU,EAA3B;AACA,QAAM0B,oBAAoB,GAAGlC,IAAI,CAACmC,SAAL,CAAeF,IAAI,CAACG,KAApB,EAA2BC,IAA3B,CAAgCJ,IAAhC,CAA7B;AACA,QAAMK,MAAM,GAAG,MAAMJ,oBAAoB,CAAC,sBAAD,CAAzC;AACA,SAAOZ,WAAW,CAAC,GAAD,EAAMgB,MAAN,CAAlB;AACD,CALM","sourcesContent":["const mysql = require(\"mysql\");\nconst util = require(\"util\");\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({ region: \"ap-southeast-1\" });\n\nvar options = {\n  Name: \"/app/cinema\", // required\n  WithDecryption: true, // required if you have a secret string parameter\n};\n\nvar createPool = async () => {\n  let params = await ssm.getParameter(options).promise();\n  let p = JSON.parse(params.Parameter.Value);\n  return mysql.createPool({\n    host: p[\"host\"],\n    user: p[\"user\"],\n    password: p[\"password\"],\n    database: p[\"database\"],\n    port: p[\"port\"],\n  });\n};\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg,\n    }),\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  let pool = await createPool();\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};\n"]},"metadata":{},"sourceType":"module"}