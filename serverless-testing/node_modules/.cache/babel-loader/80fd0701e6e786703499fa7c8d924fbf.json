{"ast":null,"code":"import \"source-map-support/register\";\n\nconst mysql = require(\"mysql\");\n\nconst util = require(\"util\");\n\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({\n  region: \"ap-southeast-1\"\n});\nvar options = {\n  Name: \"/app/cinema\"\n  /* required */\n  ,\n  WithDecryption: true\n};\nvar params;\nvar p = new Promise(function (success, reject) {\n  ssm.getParameter(options, function (err, data) {\n    if (err) {\n      reject(err);\n    } else {\n      success(data);\n    }\n  });\n});\nPromise(p).then(function (result) {\n  params = result;\n}).catch(function (err) {\n  console.log(err);\n}); // const p = await paramsPromisify(options);\n// var p = params\n//   .then(function (data, err) {\n//     if (err) {\n//       console.log(err, err.stack);\n//     } // an error occurred\n//     else {\n//       console.log(JSON.parse(data.Parameter.Value), \"_____1\");\n//       return JSON.parse(data.Parameter.Value);\n//     } // successful response\n//   });\n\nconsole.log(params, \"_____2\");\nvar pool = mysql.createPool({\n  host: p.host,\n  user: p.user,\n  password: p.password,\n  database: p.database,\n  port: p.port\n});\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg\n    })\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};","map":{"version":3,"sources":["/Users/logan/Documents/GitHub/serverless-testing/serverless-testing/tests/getMovie.js"],"names":["mysql","require","util","aws","ssm","SSM","region","options","Name","WithDecryption","params","p","Promise","success","reject","getParameter","err","data","then","result","catch","console","log","pool","createPool","host","user","password","database","port","apiResponse","status","msg","statusCode","body","JSON","stringify","message","handler","event","context","callback","connQueryPromisified","promisify","query","bind"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAIG,GAAG,GAAG,IAAID,GAAG,CAACE,GAAR,CAAY;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAZ,CAAV;AAEA,IAAIC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE;AAAc;AADR;AAEZC,EAAAA,cAAc,EAAE;AAFJ,CAAd;AAIA,IAAIC,MAAJ;AACA,IAAIC,CAAC,GAAG,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC7CV,EAAAA,GAAG,CAACW,YAAJ,CAAiBR,OAAjB,EAA0B,UAAUS,GAAV,EAAeC,IAAf,EAAqB;AAC7C,QAAID,GAAJ,EAAS;AACPF,MAAAA,MAAM,CAACE,GAAD,CAAN;AACD,KAFD,MAEO;AACLH,MAAAA,OAAO,CAACI,IAAD,CAAP;AACD;AACF,GAND;AAOD,CARO,CAAR;AAUAL,OAAO,CAACD,CAAD,CAAP,CACGO,IADH,CACQ,UAAUC,MAAV,EAAkB;AACtBT,EAAAA,MAAM,GAAGS,MAAT;AACD,CAHH,EAIGC,KAJH,CAIS,UAAUJ,GAAV,EAAe;AACpBK,EAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACD,CANH,E,CAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,OAAO,CAACC,GAAR,CAAYZ,MAAZ,EAAoB,QAApB;AAEA,IAAIa,IAAI,GAAGvB,KAAK,CAACwB,UAAN,CAAiB;AAC1BC,EAAAA,IAAI,EAAEd,CAAC,CAACc,IADkB;AAE1BC,EAAAA,IAAI,EAAEf,CAAC,CAACe,IAFkB;AAG1BC,EAAAA,QAAQ,EAAEhB,CAAC,CAACgB,QAHc;AAI1BC,EAAAA,QAAQ,EAAEjB,CAAC,CAACiB,QAJc;AAK1BC,EAAAA,IAAI,EAAElB,CAAC,CAACkB;AALkB,CAAjB,CAAX;;AAQA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACnC,SAAO;AACLC,IAAAA,UAAU,EAAEF,MADP;AAELG,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,OAAO,EAAEL;AADU,KAAf;AAFD,GAAP;AAMD,CAPD;;AASA,OAAO,MAAMM,OAAO,GAAG,OAAOC,KAAP,EAAcC,OAAd,EAAuBC,QAAvB,KAAoC;AACzD,QAAMC,oBAAoB,GAAGxC,IAAI,CAACyC,SAAL,CAAepB,IAAI,CAACqB,KAApB,EAA2BC,IAA3B,CAAgCtB,IAAhC,CAA7B;AACA,QAAMJ,MAAM,GAAG,MAAMuB,oBAAoB,CAAC,sBAAD,CAAzC;AACA,SAAOZ,WAAW,CAAC,GAAD,EAAMX,MAAN,CAAlB;AACD,CAJM","sourcesContent":["const mysql = require(\"mysql\");\nconst util = require(\"util\");\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({ region: \"ap-southeast-1\" });\n\nvar options = {\n  Name: \"/app/cinema\" /* required */,\n  WithDecryption: true,\n};\nvar params;\nvar p = new Promise(function (success, reject) {\n  ssm.getParameter(options, function (err, data) {\n    if (err) {\n      reject(err);\n    } else {\n      success(data);\n    }\n  });\n});\n\nPromise(p)\n  .then(function (result) {\n    params = result;\n  })\n  .catch(function (err) {\n    console.log(err);\n  });\n\n// const p = await paramsPromisify(options);\n\n// var p = params\n//   .then(function (data, err) {\n//     if (err) {\n//       console.log(err, err.stack);\n//     } // an error occurred\n//     else {\n//       console.log(JSON.parse(data.Parameter.Value), \"_____1\");\n//       return JSON.parse(data.Parameter.Value);\n//     } // successful response\n//   });\n\nconsole.log(params, \"_____2\");\n\nvar pool = mysql.createPool({\n  host: p.host,\n  user: p.user,\n  password: p.password,\n  database: p.database,\n  port: p.port,\n});\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg,\n    }),\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};\n"]},"metadata":{},"sourceType":"module"}