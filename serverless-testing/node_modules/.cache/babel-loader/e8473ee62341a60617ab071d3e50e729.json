{"ast":null,"code":"import \"source-map-support/register\";\n\nconst mysql = require(\"mysql\");\n\nconst util = require(\"util\");\n\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({\n  region: \"ap-southeast-1\"\n});\nvar options = {\n  Name: \"/app/cinema\",\n  // required\n  WithDecryption: true // required if you have a secret string parameter\n\n};\n\nvar params = (async () => await ssm.getParameter(options).promise())();\n\nlet p = params;\nconsole.log(p, \"____payload\");\nvar pool = mysql.createPool({\n  host: p[\"host\"],\n  user: p[\"user\"],\n  password: p[\"password\"],\n  database: p[\"database\"],\n  port: p[\"port\"]\n});\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg\n    })\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};","map":{"version":3,"sources":["/Users/logan/Documents/GitHub/serverless-testing/serverless-testing/tests/getMovie.js"],"names":["mysql","require","util","aws","ssm","SSM","region","options","Name","WithDecryption","params","getParameter","promise","p","console","log","pool","createPool","host","user","password","database","port","apiResponse","status","msg","statusCode","body","JSON","stringify","message","handler","event","context","callback","connQueryPromisified","promisify","query","bind","result"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAIG,GAAG,GAAG,IAAID,GAAG,CAACE,GAAR,CAAY;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAZ,CAAV;AAEA,IAAIC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE,aADM;AACS;AACrBC,EAAAA,cAAc,EAAE,IAFJ,CAEU;;AAFV,CAAd;;AAKA,IAAIC,MAAM,GAAG,CAAC,YAAY,MAAMN,GAAG,CAACO,YAAJ,CAAiBJ,OAAjB,EAA0BK,OAA1B,EAAnB,GAAb;;AACA,IAAIC,CAAC,GAAGH,MAAR;AACAI,OAAO,CAACC,GAAR,CAAYF,CAAZ,EAAe,aAAf;AACA,IAAIG,IAAI,GAAGhB,KAAK,CAACiB,UAAN,CAAiB;AAC1BC,EAAAA,IAAI,EAAEL,CAAC,CAAC,MAAD,CADmB;AAE1BM,EAAAA,IAAI,EAAEN,CAAC,CAAC,MAAD,CAFmB;AAG1BO,EAAAA,QAAQ,EAAEP,CAAC,CAAC,UAAD,CAHe;AAI1BQ,EAAAA,QAAQ,EAAER,CAAC,CAAC,UAAD,CAJe;AAK1BS,EAAAA,IAAI,EAAET,CAAC,CAAC,MAAD;AALmB,CAAjB,CAAX;;AAQA,MAAMU,WAAW,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACnC,SAAO;AACLC,IAAAA,UAAU,EAAEF,MADP;AAELG,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,OAAO,EAAEL;AADU,KAAf;AAFD,GAAP;AAMD,CAPD;;AASA,OAAO,MAAMM,OAAO,GAAG,OAAOC,KAAP,EAAcC,OAAd,EAAuBC,QAAvB,KAAoC;AACzD,QAAMC,oBAAoB,GAAGjC,IAAI,CAACkC,SAAL,CAAepB,IAAI,CAACqB,KAApB,EAA2BC,IAA3B,CAAgCtB,IAAhC,CAA7B;AACA,QAAMuB,MAAM,GAAG,MAAMJ,oBAAoB,CAAC,sBAAD,CAAzC;AACA,SAAOZ,WAAW,CAAC,GAAD,EAAMgB,MAAN,CAAlB;AACD,CAJM","sourcesContent":["const mysql = require(\"mysql\");\nconst util = require(\"util\");\nconst aws = require(\"aws-sdk\");\n\nvar ssm = new aws.SSM({ region: \"ap-southeast-1\" });\n\nvar options = {\n  Name: \"/app/cinema\", // required\n  WithDecryption: true, // required if you have a secret string parameter\n};\n\nvar params = (async () => await ssm.getParameter(options).promise())();\nlet p = params;\nconsole.log(p, \"____payload\");\nvar pool = mysql.createPool({\n  host: p[\"host\"],\n  user: p[\"user\"],\n  password: p[\"password\"],\n  database: p[\"database\"],\n  port: p[\"port\"],\n});\n\nconst apiResponse = (status, msg) => {\n  return {\n    statusCode: status,\n    body: JSON.stringify({\n      message: msg,\n    }),\n  };\n};\n\nexport const handler = async (event, context, callback) => {\n  const connQueryPromisified = util.promisify(pool.query).bind(pool);\n  const result = await connQueryPromisified(\"SELECT * FROM Movie;\");\n  return apiResponse(200, result);\n};\n"]},"metadata":{},"sourceType":"module"}